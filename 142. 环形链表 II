/* 给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。

不允许修改 链表。

思路：
1.初始化快慢指针，fast走的步长是slow的两倍
->相遇说明有环，切相遇点到入环口的位置=head到入环点点位置
2.在head添加一个新的指针ptr，三个指针接着走，当ptr和slow相遇的位置就是入环点

数学证明：（slow和fast一定在环内相遇）
head到入环点距离：a
入环口到相遇点的距离：b
相遇点到入环口的距离：c

第一次相遇时fast走过：2(a+b) = a+b+c+b, 可得a=c。
