/* 
题目：给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 
知识点：归并排序，快速排序，快慢指针

-（二路）归并排序：MergeSort采用分治法的思想，把一个无序数组不断拆分，将若干个已排序的子文件合并成一个有序的文件。
   将一个大问题分割成小问题来分别解决，然后用所有小问题的答案来解决整个大问题。
   实现方法：Bottom-to-up
      步骤：1）将待排序的文件A[1...n]看作n个长度为1的有序子文件，将这些子文件两两归并。若n为偶数，则得到n/2个长度为2的有序子文件；若n为奇数，最后一个子文件不参与归并。
           2）将1）中归并得到的n/2个有序子文件两两归并，如此反复，直到最后得到一个长度为n的有序文件为止。
           
   merge()函数：合并操作(https://mikejun.blog.csdn.net/article/details/80634237?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_aa&utm_relevant_index=4)
   -merge(fr1,fr2,on='id')#将指定列id下的，共同的部分进行合并。只要符合相同id,可合并多次。
   -merge(fr1,fr2,left_on='sid',left_on='id')#id和sid有相同，就合并
   -merge(fr1,fr2,left_on='sid',left_on='id',how='left')#内链接，即以函数内左边fr1为主，写出它全部数据，合并fr2与有和他重复的，没有写NaN
   -merge(fr1,fr2,left_on='sid',left_on='id',how='outer')#外链接，id和sid有相同，就合并。不相同直接写出，没有数据部分写NaN
   -merge(fr1,fr2,left_index=True,right_index=True)#根据索引进行合并，物理合并fr1,fr2，即左右并排放

   
-快速排序：QuickSort()假设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用第一个数据）作为关键数据，然后将所有比它的数都放到它前面，所有比它大的数都放到它后面，这个过程称为一躺快速排序。一躺快速排序的算法是：
      步骤：1）设置两个变量I、J，排序开始的时候I：=1，J：=N-1；
           2）以第一个数组元素作为关键数据，赋值给X，即X=A[1]；
           3）从J开始向前搜索，即由后开始向前搜索（J=J-1），找到第一个小于X的值，两者交换；
           4）从I开始向后搜索，即由前开始向后搜索（I=I+1），找到第一个大于X的值，两者交换；
           5）重复第3、4步，直到I=J；
           
-快慢指针: fast()/slow()从同一侧但以不同的策略移动的指针,当快指针移动到数组的顶端时，停止遍历或进行新一轮遍历。
    Note: Dummy-Head 为了避免fast指向null，有时需要将快慢指针指向集合的head的前一位。（https://yanyusoul.com/blog/cs/algorithms_fast-slow-points/）
          实现这个步骤，我们需要定义一个不干扰结果的对象dummy，并将它的next对象指向集合的head。
 经典习题: 
 1. 从列表删除倒数第 N 个节点（Leetcode 19）
          步骤：1）设置dummy对象其next指向head，避免fast指到null。
               2）设置快慢两个指针指向dummy。
               3）通过for循环让快指针先移动n次。
               4）通过while循环同时移动快慢两个指针，直到快指针指到链表的底部为止。
               5）断开slow和它下一位的连接，并使其连接它的下下位，这样就完成了删除工作。v
               6）返回新的链表。
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0); 
        dummy.next = head;
        ListNode slow = dummy;
        ListNode fast = dummy;
        for (int i = 0; i<n;i++) {
            fast = fast.next;
        }
        while (fast.next != null) {
            slow = slow.next;
            fast = fast.next;
        }
        slow.next = slow.next.next;
        return dummy.next;
    }
    
2.成对交换节点（Leetcode 24）不能修改列表节点中的值，只能更改节点本身。
步骤：1）如果输入的链表为null，返回null。
     2）定义快慢两个指针，慢指针指向头部，快指针指到第二位。
     3）定义int i, 开启while循环，当快指针指到null时停止循环。如果i为偶数，交换快慢两个指针指向的对象的值，如果i为奇数则不变。
     4）返回新的链表。
class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null) return head;
        ListNode slow = head;
        ListNode fast = head.next;
        int i = 0;
        while (fast != null){
            if (i%2 == 0){
                int val = slow.val;
                slow.val = fast.val;
                fast.val = val;
            }
            slow = slow.next;
            fast = fast.next;
            i++;
        }
        return head;
    }
}
*/





