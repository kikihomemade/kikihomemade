/* 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
   请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
   
   知识点：二分查找
   前提：数组为有序数组，同时题目还强调数组中无重复元素，因为一旦有重复元素，使用二分查找法返回的元素下标可能不是唯一的
   举例（704. 二分查找）：给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。
   
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1; // 定义target在左闭右闭的区间里，[left, right]
        while (left <= right) { // 当left==right，区间[left, right]依然有效，所以用 <=
            int middle = left + ((right - left) / 2);// 防止溢出 等同于(left + right)/2
            if (nums[middle] > target) {
                right = middle - 1; // target 在左区间，所以[left, middle - 1]
            } else if (nums[middle] < target) {
                left = middle + 1; // target 在右区间，所以[middle + 1, right]
            } else { // nums[middle] == target
                return middle; // 数组中找到目标值，直接返回下标
            }
        }
        // 未找到目标值
        return -1;
    }
};

本题思路：从左下角开始查找，小于target就往右边一列，大于target往上边一行，同样也可从右上角开始*/

class solution{
public:
   bool findNUmberIn2DArray(vector<vetor<int>>& matrix, int traget){
   //非法判断
   if(matrix.empty()) return false;
   int row = matrix.size();
   int col = matrix[0].size();
   //初始化定位到左下角
   int r = row-1;
   int c = 0;
   
   //循环判断
   while(c<col && r>=0)
     if(matrix[r][c] == target){
       return true;
     }
     if(matrix[r][c] > target){
       r--;
     }else{
       c++;
     }
   }
   return false;
   }
};
